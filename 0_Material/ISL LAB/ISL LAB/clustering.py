# -*- coding: utf-8 -*-
"""clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UkA3via7fQQwCt8gguUs6rsERmtNnROo
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_moons
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
from sklearn.mixture import GaussianMixture
from sklearn.metrics import homogeneity_score, completeness_score, v_measure_score, adjusted_rand_score, adjusted_mutual_info_score, silhouette_score

# Generate 'make_moons' dataset
X, y = make_moons(n_samples=200, noise=0.1, random_state=42)

# Define clustering algorithms
clustering_algorithms = [
    ('KMeans', KMeans(n_clusters=2)),
    ('DBSCAN', DBSCAN(eps=0.2, min_samples=5)),
    ('Agglomerative', AgglomerativeClustering(n_clusters=2)),
    ('GaussianMixture', GaussianMixture(n_components=2))
]

# Initialize scores dictionary
scores = {
    'Homogeneity': [],
    'Completeness': [],
    'V-measure': [],
    'Adjusted Rand': [],
    'Adjusted Mutual Info': [],
    'Silhouette': []
}

# Iterate over clustering algorithms
for name, algorithm in clustering_algorithms:
    # Fit the model and predict clusters
    if name == 'GaussianMixture':
        y_pred = algorithm.fit_predict(X)
    else:
        y_pred = algorithm.fit_predict(X)

    # Compute clustering evaluation scores
    scores['Homogeneity'].append(homogeneity_score(y, y_pred))
    scores['Completeness'].append(completeness_score(y, y_pred))
    scores['V-measure'].append(v_measure_score(y, y_pred))
    scores['Adjusted Rand'].append(adjusted_rand_score(y, y_pred))
    scores['Adjusted Mutual Info'].append(adjusted_mutual_info_score(y, y_pred))
    scores['Silhouette'].append(silhouette_score(X, y_pred))

# Print clustering evaluation scores
print("Clustering Evaluation Scores:")
for metric, values in scores.items():
    print(f"{metric}: {np.mean(values):.4f}")

# Plotting results
plt.figure(figsize=(12, 8))
plt.bar(scores.keys(), [np.mean(values) for values in scores.values()], color='skyblue')
plt.title('Clustering Evaluation Scores')
plt.xlabel('Metrics')
plt.ylabel('Score')
plt.xticks(rotation=45)
plt.show()

