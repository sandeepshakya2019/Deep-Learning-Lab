# -*- coding: utf-8 -*-
"""randomForest_real.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KQnbEVOvwtRYYssKY2PaSC6E3XXiRq52
"""

from sklearn.datasets import fetch_olivetti_faces
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import precision_score, recall_score, classification_report
import numpy as np

def train_random_forest(X_train, y_train, max_depth=None):
    clf = RandomForestClassifier(max_depth=max_depth, random_state=42)
    clf.fit(X_train, y_train)
    return clf

def calculate_mean_average_precision(y_true, y_pred):
    unique_classes = np.unique(y_true)
    avg_precisions = []

    for cls in unique_classes:
        # Get binary labels for the current class
        binary_true = np.where(y_true == cls, 1, 0)
        binary_pred = np.where(y_pred == cls, 1, 0)

        # Calculate precision for the current class
        precision = precision_score(binary_true, binary_pred, zero_division=1)

        # Append precision to list of average precisions
        avg_precisions.append(precision)

    mean_avg_precision = np.mean(avg_precisions)
    return mean_avg_precision

def evaluate_classifier(clf, X_test, y_test):
    y_pred = clf.predict(X_test)

    precision = precision_score(y_test, y_pred, average='macro', zero_division=1)
    recall = recall_score(y_test, y_pred, average='macro', zero_division=1)
    classification_matrix = classification_report(y_test, y_pred,zero_division=1)
    mean_avg_precision = calculate_mean_average_precision(y_test, y_pred)

    print("Precision:", precision)
    print("Recall:", recall)
    print("Classification Report:\n", classification_matrix)
    print("Mean Average Precision:", mean_avg_precision)

def main():
    # Load Olivetti faces dataset
    faces_data = fetch_olivetti_faces()
    X = faces_data.data
    y = faces_data.target

    # Split data into train and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train Random Forest classifier with max_depth=None (not specified)
    print("Random Forest Classifier with max_depth not specified:")
    clf_no_max_depth = train_random_forest(X_train, y_train)
    evaluate_classifier(clf_no_max_depth, X_test, y_test)
    print("\n")

    # Train Random Forest classifier with max_depth=1
    print("Random Forest Classifier with max_depth=1:")
    clf_max_depth_1 = train_random_forest(X_train, y_train, max_depth=1)
    evaluate_classifier(clf_max_depth_1, X_test, y_test)
    print("\n")

    # Train Random Forest classifier with max_depth=2
    print("Random Forest Classifier with max_depth=2:")
    clf_max_depth_2 = train_random_forest(X_train, y_train, max_depth=2)
    evaluate_classifier(clf_max_depth_2, X_test, y_test)
    print("\n")

if __name__ == "__main__":
    main()