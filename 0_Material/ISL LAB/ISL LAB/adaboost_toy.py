# -*- coding: utf-8 -*-
"""adaboost_toy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CeAFg4kVw7CqbzTgoAUVdDdbGqVa3ILs

# Ada Boost for Iris dataset
"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import AdaBoostClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, classification_report
from sklearn.tree import DecisionTreeClassifier

def evaluate_classifier(clf, X_train, y_train, X_test, y_test):
    clf.fit(X_train, y_train)
    y_train_pred = clf.predict(X_train)
    y_test_pred = clf.predict(X_test)

    train_accuracy = accuracy_score(y_train, y_train_pred)
    test_accuracy = accuracy_score(y_test, y_test_pred)
    precision = precision_score(y_test, y_test_pred, average='macro')
    recall = recall_score(y_test, y_test_pred, average='macro')
    classification_matrix = classification_report(y_test, y_test_pred)

    print(f"Train Accuracy: {train_accuracy:.4f} | Test Accuracy: {test_accuracy:.4f}")
    print(f"Precision: {precision:.4f} | Recall: {recall:.4f}")
    print("Classification Report:\n", classification_matrix)

iris = load_iris()
X = iris.data
y = iris.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Logistic Regression as base estimator
print("AdaBoost Classifier with Logistic Regression as base estimator:")
estimators_list = [1, 10, 20, 50, 70, 100, 200, 300]
for n_estimators in estimators_list:
    clf = AdaBoostClassifier(estimator=LogisticRegression(), n_estimators=n_estimators, random_state=42)
    print(f"Number of estimators: {n_estimators}")
    evaluate_classifier(clf, X_train, y_train, X_test, y_test)
    print()

# Decision Tree Classifier with max_depth=1 as base estimator
print("AdaBoost Classifier with Decision Tree (max_depth=1) as base estimator:")
for n_estimators in estimators_list:
    clf = AdaBoostClassifier(estimator=DecisionTreeClassifier(max_depth=1), n_estimators=n_estimators, random_state=42)
    print(f"Number of estimators: {n_estimators}")
    evaluate_classifier(clf, X_train, y_train, X_test, y_test)
    print()


# Decision Tree Classifier with max_depth=2 as base estimator
print("AdaBoost Classifier with Decision Tree (max_depth=2) as base estimator:")
for n_estimators in estimators_list:
    clf = AdaBoostClassifier(estimator=DecisionTreeClassifier(max_depth=2), n_estimators=n_estimators, random_state=42)
    print(f"Number of estimators: {n_estimators}")
    evaluate_classifier(clf, X_train, y_train, X_test, y_test)
    print()



"""# Ada Boost with Wine Dataset"""

from sklearn.datasets import load_wine
from sklearn.model_selection import train_test_split
from sklearn.ensemble import AdaBoostClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier

wine = load_wine()
X = wine.data
y = wine.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

estimators = [1, 10, 20, 50, 70, 100, 200, 300]
for n_estimators in estimators:
    clf = AdaBoostClassifier(estimator=DecisionTreeClassifier(max_depth=1), n_estimators=n_estimators, random_state=42)
    clf.fit(X_train, y_train)
    y_train_pred = clf.predict(X_train)
    y_test_pred = clf.predict(X_test)
    train_accuracy = accuracy_score(y_train, y_train_pred)
    test_accuracy = accuracy_score(y_test, y_test_pred)
    print(f"Number of estimators: {n_estimators} | Train Accuracy: {train_accuracy:.4f}| Test Accuracy: {test_accuracy:.4f} ")
    print()

wine = load_wine()
X = wine.data
y = wine.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

estimators = [1, 10, 20, 50, 70, 100, 200, 300]
for n_estimators in estimators:
    clf = AdaBoostClassifier(estimator=DecisionTreeClassifier(max_depth=2), n_estimators=n_estimators, random_state=42)
    clf.fit(X_train, y_train)
    y_train_pred = clf.predict(X_train)
    y_test_pred = clf.predict(X_test)
    train_accuracy = accuracy_score(y_train, y_train_pred)
    test_accuracy = accuracy_score(y_test, y_test_pred)
    print(f"Number of estimators: {n_estimators} | Train Accuracy: {train_accuracy:.4f}| Test Accuracy: {test_accuracy:.4f} ")
    print()