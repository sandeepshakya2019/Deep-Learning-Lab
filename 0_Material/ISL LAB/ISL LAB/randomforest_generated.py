# -*- coding: utf-8 -*-
"""randomForest_generated.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MtiYZ4kX6keG6jW3dHxjNBRFihiQBaev

# Random Forest Classification on Make moons, blobs and circles
"""

from sklearn.datasets import make_moons, make_blobs, make_circles
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, precision_score, average_precision_score
import numpy as np

"""##Depth param not mentioned"""

datasets = {
    'make_moons': make_moons(n_samples=1000, noise=0.2, random_state=42),
    'make_blobs': make_blobs(n_samples=1000, centers=2, random_state=42),
    'make_circles': make_circles(n_samples=1000, noise=0.2, factor=0.5, random_state=42)
}

for dataset_name, (X, y) in datasets.items():
    print(f"Dataset: {dataset_name}")
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    clf = RandomForestClassifier(n_estimators=100, random_state=42)
    clf.fit(X_train, y_train)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred, average='weighted')
    classification_rep = classification_report(y_test, y_pred)


    print("Accuracy:", accuracy)
    print("Precision:", precision)
    print("Classification Report:")
    print(classification_rep)

    classes = np.unique(y_test)
    mean_avg_precision = 0

    for class_label in classes:

        binary_y_test = (y_test == class_label).astype(int)
        binary_y_pred = (y_pred == class_label).astype(int)

        avg_precision = average_precision_score(binary_y_test, binary_y_pred)
        print(f"Average Precision for Class {class_label}: {avg_precision:.4f}")

        mean_avg_precision += avg_precision

    mean_avg_precision /= 3
    print(f"\nMean Average Precision: {mean_avg_precision:.4f}")

    train_predictions = clf.predict(X_train)
    test_predictions = clf.predict(X_test)

    train_accuracy = accuracy_score(y_train, train_predictions)
    test_accuracy = accuracy_score(y_test, test_predictions)


    print(f"Train Accuracy: {train_accuracy:.2f}")
    print(f"Test Accuracy: {test_accuracy:.2f}")
    print("--------------------------")

"""##Depth = 1"""

for dataset_name, (X, y) in datasets.items():
    print(f"Dataset: {dataset_name}")
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    clf = RandomForestClassifier(n_estimators=100, random_state=42,max_depth=1)
    clf.fit(X_train, y_train)

    train_predictions = clf.predict(X_train)
    test_predictions = clf.predict(X_test)

    train_accuracy = accuracy_score(y_train, train_predictions)
    test_accuracy = accuracy_score(y_test, test_predictions)

    print(f"Train Accuracy: {train_accuracy:.2f}")
    print(f"Test Accuracy: {test_accuracy:.2f}")
    print("--------------------------")

"""##Depth = 2"""

for dataset_name, (X, y) in datasets.items():
    print(f"Dataset: {dataset_name}")
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    clf = RandomForestClassifier(n_estimators=100, random_state=42,max_depth=2)
    clf.fit(X_train, y_train)

    train_predictions = clf.predict(X_train)
    test_predictions = clf.predict(X_test)

    train_accuracy = accuracy_score(y_train, train_predictions)
    test_accuracy = accuracy_score(y_test, test_predictions)

    print(f"Train Accuracy: {train_accuracy:.2f}")
    print(f"Test Accuracy: {test_accuracy:.2f}")
    print("--------------------------")