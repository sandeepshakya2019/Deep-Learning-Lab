# -*- coding: utf-8 -*-
"""gradientBoost_generated.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AJC8wjT0mvsaL2f6BjDDYla-NvuBBqtO

# Gradient Boosting with make moons, blobs and circles dataset
"""

from sklearn.datasets import make_moons, make_blobs, make_circles
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor
from sklearn.metrics import accuracy_score, mean_squared_error
import numpy as np

from sklearn.metrics import accuracy_score, classification_report, precision_score, average_precision_score
import numpy as np

"""##Dataset Creation"""

datasets = {
    'make_moons': make_moons(n_samples=1000, noise=0.2, random_state=42),
    'make_blobs': make_blobs(n_samples=1000, centers=2, random_state=42),
    'make_circles': make_circles(n_samples=1000, noise=0.2, factor=0.5, random_state=42)
}

estimators = [1, 10, 20, 50, 70, 100, 200, 300]

"""##Gradient Boosting Regressor"""

for dataset_name, (X, y) in datasets.items():
    print(f"Dataset: {dataset_name}")
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    print("Gradient Boosting Regressor:")
    for n in estimators:
        clf = GradientBoostingRegressor(n_estimators=n, random_state=42)
        clf.fit(X_train, y_train)

        train_predictions = clf.predict(X_train)
        test_predictions = clf.predict(X_test)

        train_mse = mean_squared_error(y_train, train_predictions)
        test_mse = mean_squared_error(y_test, test_predictions)
        print(f"Estimators: {n}, Train MSE: {train_mse:.2f}, Test MSE: {test_mse:.2f}")
    print("--------------------------")

"""##Gradient Boosting CLassifier"""

for dataset_name, (X, y) in datasets.items():
    print(f"Dataset: {dataset_name}")
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    print("Gradient Boosting Classifier:")
    for n in estimators:
        clf = GradientBoostingClassifier(n_estimators=n, random_state=42)
        clf.fit(X_train, y_train)
        y_pred = clf.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        precision = precision_score(y_test, y_pred, average='weighted')
        classification_rep = classification_report(y_test, y_pred)


        print("Accuracy:", accuracy)
        print("Precision:", precision)
        print("Classification Report:")
        print(classification_rep)

        classes = np.unique(y_test)
        mean_avg_precision = 0

        for class_label in classes:

            binary_y_test = (y_test == class_label).astype(int)
            binary_y_pred = (y_pred == class_label).astype(int)

            avg_precision = average_precision_score(binary_y_test, binary_y_pred)
            print(f"Average Precision for Class {class_label}: {avg_precision:.4f}")

            mean_avg_precision += avg_precision

        mean_avg_precision /= 3
        print(f"\nMean Average Precision: {mean_avg_precision:.4f}")

        train_predictions = clf.predict(X_train)
        test_predictions = clf.predict(X_test)

        train_accuracy = accuracy_score(y_train, train_predictions)
        test_accuracy = accuracy_score(y_test, test_predictions)

        print(f"Estimators: {n}, Train Accuracy: {train_accuracy:.2f}, Test Accuracy: {test_accuracy:.2f}")
    print("--------------------------")